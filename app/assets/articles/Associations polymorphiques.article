--date 
29/04/2012

--tags
ActiveRecord, Relations

--introduction
L'association polymorphique peut sembler compliquée et déroutante. En regardant d'un peu plus près, son utilisation n'est pas si difficile et peut être très utile ! C'est une association qui permet à un modèle d'appartenir à plusieurs autres modèles.

--title
Associations polymorphiques

--authors
Nima

--content
.require
  Pré-requis :
  %ul
    %li Connaître l'héritage.
    %li 
      Avoir déjà vu les différentes associations 
      (<a target="_blank" href="http://ontherailsagain.com/articles/les-associations-one-to-many" rel="nofollow">One-to-Many</a>,
      <a target="_blank" href="http://ontherailsagain.com/articles/les-associations-many-to-many" rel="nofollow">Many-to-Many</a>,
      <a target="_blank" href="http://ontherailsagain.com/articles/les-associations-many-to-many-avancees" rel="nofollow">Many-to-Many avancées</a>).

.see
  Ce que nous allons voir :
  %ul
    %li Créer une association polymorphique.
    %li Utiliser une association polymorphique comme ressource imbriquée.
    %li Créer une ressource polymorphique de façon générique.

%h2 Qu'est-ce que c'est ?

%p
  L'association polymorphique est une association qui permet à un modèle d'appartenir à plusieurs autres modèles. Il ne dépend donc pas d'un unique modèle. Par exemple, un modèle <span class="code">Comment</span> peut appartenir à des <span class="code">Articles</span>, mais aussi à des <span class="code">Events</span>. De cette façon, vous n'avez pas besoin de dupliquer des modèles ayant des informations similaires.

%h2 Un exemple concret

%p
  Illustrons le problème par un exemple.
  Supposons que nous avons trois modèles : <span class="code">Article</span>, <span class="code">Event</span> et <span class="code">Photo</span>. Le but est de créer un unique modèle <span class="code">Comment</span> pour nos trois types de ressources.

%p Voilà un schéma représentatif de ce que l'on veut obtenir&nbsp;:
%img{:src => "http://ontherailsagain.com/article_images/Associations_polymorphiques/Associations_polymorphiques.png", :alt => 'Représentation schématique de la relation polymorphique', :title => 'Schéma de l'association polymorphique'}

%h3 Création du modèle
%p
  Comme toujours, des conventions sont à respecter pour que tout se passe comme prévu. Le modèle <span class="code">Comment</span> n'étant plus lié à un modèle spécifique, il faut lui spécifier un champ qui réfèrera à l'ID de la ressource auquel il appartient ainsi que le type de ce dernier. Voilà comment générer le modèle <span class="code">Comment</span>&nbsp;

%pre.prettyprint.linenums
  :preserve
    $ rails g model Comment content:text commentable_id:integer commentable_type:string

%h3 Migration
%p
  Pour récapituler, il faut stoquer l'ID de l'objet auquel le commentaire appartient et le type de ce dernier.
  Côté migration, deux façons d'écrire :

%pre.prettyprint.linenums
  :preserve
    # db/migrate/201101249412_create_comments.rb
    class CreateComments < ActiveRecord::Migration
      def change
        create_table :comments do |t|
          t.string :content
          t.integer :commentable_id
          t.string  :commentable_type
          t.timestamps
        end
      end
    end

%p
  Ou :

%pre.prettyprint.linenums
  :preserve
    # db/migrate/201101249412_create_comments.rb
    class CreateComments < ActiveRecord::Migration
      def change
        create_table :comments do |t|
          t.string :content
          t.integer :commentable, :polymorphic => true
          t.timestamps
        end
      end
    end

%h3 Associations dans les modèles
%p
  Il faut maintenant déclarer dans les modèles concernés les associations de la façon suivante&nbsp;:

%pre.prettyprint.linenums
  :preserve
    # app/models/comment.rb
    class Comment < ActiveRecord::Base
      belongs_to :commentable, :polymorphic => true
      ...

    # app/models/event.rb
    class Event < ActiveRecord::Base
      has_many :comments, :as => :commentable
      ...

    # app/models/photo.rb
    class Photo < ActiveRecord::Base
      has_many :comments, :as => :commentable
      ...

    # app/models/article.rb
    class Article < ActiveRecord::Base
      has_many :comments, :as => :commentable
      ...

%h3 Création d'un commentaire
%p
  Si on veut maintenant créer un commentaire et l'associer à un article, on peut simplement faire&nbsp; 

%pre.prettyprint.linenums
  :preserve
    @article.comments.create(:content => 'Mon contenu')

%h2 Aller plus loin
%h3 Ressources imbriquées
%p
  Si on veut généraliser et que l'on veut accéder par exemple à tous les commentaires d'un article par l'URL <span class="code">/articles/1/comments</span> il faut utiliser les ressources imbriquées et pour cela modifier les <span class="code">routes</span>.

%pre.prettyprint.linenums
  :preserve
    # config/routes.rb
    resources :model_name do
      resources :comments
    end
%p
  En faisant ça pour chaque modèle, la route <span class="code">/model/1/comments</span> redirigera alors vers l'action <span class="code">index</span> de <span class="code">CommentsController</span>. Et c'est dans cette méthode qu'il faut, en fonction du type de la ressource, afficher les commentaires.

%h3 Récupérer la ressource
%p
  Ryan Bates nous propose dans son <a target="_blank" href="http://railscasts.com/episodes/154-polymorphic-association" rel="nofollow">RailsCast</a> une méthode pour récupérer la ressource concernée.

%pre.prettyprint.linenums
  :preserve
    # app/controllers/comments_controller.rb
    private
    def find_commentable
      params.each do |name, value|
        # Regex correspondant à la forme model_id
        if name =~ /(.+)_id$/
          # $1 correspond au nom du modèle
          return $1.classify.constantize.find(value) 
        end
      end
      nil # Retourne nil si rien n'a été trouvé
    end

%p
  La méthode ci-dessus parcours tous les paramètres envoyés par le client et cherche un paramètre se terminant par <span class="code">_id</span>. Si nous étions à l'url <span class="code">/articles/1/comments</span>, nous aurions par exemple <span class="code">article_id</span> avec comme valeur 1.

%p
  Si la méthode trouve une correspondance dans les paramètres, elle appelle la méthode <span class="code">classify</span> sur le nom du modèle. La méthode <a target="_blank" href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-classify" rel="nofollow">classify</a> transforme les chaînes de caractère s'apparentant à des noms de tables en des chaînes de caractère pouvant correspondre à des noms de classe. Par exemple&nbsp; 
  
%pre.prettyprint.linenums
  :preserve
    "egg_and_hams".classify # => "EggAndHam"
    "posts".classify        # => "Post"

%p
  Puis, la méthode <a target="_blank" href="http://api.rubyonrails.org/classes/ActiveSupport/Inflector.html#method-i-constantize" rel="nofollow">constantize</a> est appelé pour essayer de trouver une constante correspondante. «Article» deviendra alors la constante correspondant à la classe <code>Article</code>.

%p
  Enfin, la méthode <code>find</code> est appelé pour récupérer l'objet en question.

%h3 Afficher et créer un commentaire
%p
  De cette façon, on peut maintenant afficher dans notre vue <span class="code">index</span> de <span class="code">comments</span>, tous les commentaires de l'objet concerné.
  
%pre.prettyprint.linenums
  :preserve
    # app/controllers/comments_controller.rb
    def index
      @commentable = find_commentable
      @comments    = @commentable.comments
    end

%p
  Et dans la vue :

%pre.prettyprint.linenums
  :preserve
    # app/views/comments/index.html.erb
    <h1>Liste des commentaires</h1>
    <ul id="comments">
      <% @comments.each do |comment| %>
        <li><%= comment.content %></li>
      <% end %>
    </ul>

    <h2>Nouveau commentaire</h2>
    <% form_for [@commentable, Comment.new] do |form| %>
      <ol class="formList">
        <li>
          <%= form.label :content %>
          <%= form.text_area :content, :rows => 5 %>
        </li>
        <li><%= submit_tag "Add comment" %></li>
      </ol>
    <% end %>

%p
  Et enfin, pour l'action <span class="code">create</span> du contrôleur&nbsp;

%pre.prettyprint.linenums
  :preserve
    # app/controllers/comments_controller.rb
    def create
      @commentable = find_commentable
      @comment = @commentable.comments.build(params[:comment])
  
%p
  Voilà pour ce qui est des associations polymorphiques !

%h2 Références
%ul
  %li
    %a{:href => 'http://railscasts.com/episodes/154-polymorphic-association'} Rails Casts
    de Ryan Bates ;
  %li
    %a{:href => 'http://guides.rubyonrails.org/association_basics.html#polymorphic-associations'} ActiveRecord Association RailsGuides.

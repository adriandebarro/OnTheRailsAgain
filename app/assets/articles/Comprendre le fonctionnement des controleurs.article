--date 
21/05/2012

--tags
Routes, Contrôleurs, 

--introduction
Il peut être naturel d'avoir des ressources qui appartiennent à d'autre ressources. C'est dans ce cas là qu'il peut être intéressant d'utiliser des ressources imbriquées aux niveaux des routes pour avoir des URLs cohérente.

--title
Comprendre le fonctionement Contrôleurs-Vues

--authors
Nicolas

--content

.require
  Pré-requis :
  %ul
    %li 
      Avoir quelques notions de MVC
    %li 
      Avoir compris le
      %a{:target => '_blank', :href => "http://ontherailsagain.com/articles/comprendre-les-routes-en-rails" } fonctionnement des routes</a>.

.see
  Ce que nous allons voir :
  %ul
    %li Déclarer les ressources imbriquées au niveau des routes.
    %li Adapter les contrôleurs et les vues pour gérer ces ressources imbriquées.

%h2 Ce que fait le Contrôleur

%h3 Son rôle dans le modèle MVC

%p Dans le modèle MVC, le contrôleur constitue le lien entre le modèle et la vue. C'est-à-dire que dans un sens, le contrôleur va récupérer des informations du modèle pour les fournir à la vue. Dans l'autre sens, le contrôleur va récupérer les informations de la vue, comme par exemple les informations contenues dans un formulaire, et créer ou modifier des objets du modèle. 


%h3 Son rôle dans Ruby On Rails

%p Le contrôleur et la vue ayant un fonctionnement fortement couplé, ils sont tous deux regroupés dans un seul composant de Ruby On Rails : ActionPack. Cependant, ce n'est pas parce qu'il sont dans le même composant que le code de l'un est directement partagé avec l'autre et vice-versa. Au contraire, Rails fournit tous les outils pour avoir une bonne démarcation entre contrôle et la logique de présentation. 

%p Le contrôleur Rails est le centre logique de notre application. Il coordonne l'interaction entre l'utilisateur, les vues, et le modèle. Cependant, Rails gère la plupart de cette interaction et le code que nous devons écrire se concentre sur les fonctionnalités de l'application. Le code du contrôleur Rails est donc très facile à développer et à maintenir.
%p Le contrôleur gère un certain nombre d'importants services auxiliaires:
%ul
%li Il est responsable de faire correspondre les requêtes exterieures avec les actions internes. Grâce aux <code>path_helper</code> il permet de gérer les URLs facilement et que celles-ci soient lisibles.
%li Il s'occupe de la mise en cache.
%li Il gère les modules auxiliaires, les <code>helpers</code>, qui permettent de factoriser du code de la vue.
%li Il gère les sessions.

%h2 Ce que fait la Vue

%h3 Son rôle dans le modèle MVC

%p La vue est responsable de générer une interface utilisateur basée sur les données du modèle. Par exemple, une boutique en ligne aura une liste de produits à afficher dans un catalogue. Cette liste sera accessible via le modèle, mais ce sera la vue qui accèdera à la liste à partir du modèle et qui sera chargée de la formater pour l'afficher à l'utilisateur final.

%p Même si la vue sert à présenter la saisie de donnée à l'utilisateur, elle ne traite jamais les données entrantes. Le travail de la vue est effectuée une fois que les données sont affichées.

%p Il peut y avoir de nombreuses vues qui accèdent aux données du même modèle à des fins différentes. Par exemple, dans la boutique en ligne, il y aura une vue qui affiche des informations produit sur une page de catalogue et un autre ensemble de vues utilisées par les administrateurs pour ajouter et modifier des produits.

%h3 Son rôle dans Ruby On Rails

%p Dans Rails, la vue est responsable de créer l'ensemble ou une partie de la réponse à afficher dans la navigateur de l'utilisateur. Dans les cas les plus simples la vue est un morceau de code HTML statique. Mais plus généralement, nous avons besoin d'inclure du contenu dynamique, en créant par exemple un vue qui affiche les attributs d'un modèle, et ce en utlisant la variable représentant le modèle instancié dans le contrôleur.

%p Dans Rails, le contenu dynamique est généré par les templates. Les templates les plus communs sont les fichiers ERb (Embedded Ruby). Ils contiennent du code Ruby et du code HTML. Bien que cette approche soit très flexible il est important de ne pas casser l'esprit du MVC. Et même si la vue contient du code Ruby, il ne faut pas y mettre du code qui devrait être dans le modèle ou le contrôleur.

%h2 Méthodes et Actions

%p Nous avons vu dans le fonctionnement des routes que lorsque l'application reçoit une requête, les routes déterminent quel contrôleur et quelle action utiliser. A partir de ça, Rails crée une instance de ce contrôleur, qui est une classe Ruby comme n'importe quelle autre classe, et execute la méthode qui à le même nom que l'action souhaitée.

%p.alert.alert-info Seulement les méthodes publiques sont éxecutables comme des actions. C'est d'ailleurs une bonne pratique de déclarer privée les methodes qui ne sont pas prévues pour être des actions comme par exemple des méthodes de traitement auxiliaires ou encore des <code>filters</code>.

%p D'ailleurs, en général, nous devons nous efforcer d'avoir des gros modèles et des petits contrôleurs. Les méthodes des contrôleurs ne devraient contenir que très peu de lignes de code. Si une action contrôleur devient trop grosse, alors nous devons essayer de sortir la logique et l'inclure dans le modèle.

%h2 Créer une réponse HTTP

%p Depuis un contrôleur, il y a trois façons pour créer une réponse HTTP :

%ul
  %li Utiliser la méthode <code>render</code> qui permet de créer une réponse HTTP complète à envoyer au navigateur
  %li Utiliser la méthode <code>redirect_to</code> qui permet d'envoyer un code de redirection HTTP au navigateur et permet donc de rediriger vers une URL 
  %li Utiliser la méthode <code>head</code> qui permet de créer une réponse HTTP contenant uniquement l'entête à envoyer au navigateur.

%p.alert.alert-info Pour en savoir plus voici un article sur <a href="http://www.alsacreations.com/astuce/lire/1152-en-tetes-http.html" target="_blank">les entêtes HTTP</a>.

%p Par défaut, si rien n'est précisé, le contrôleur fait un appel à la méthode <code>render</code> et execute donc la vue ayant le même nom que celle-ci, c'est un bon exemple de « Convention Over Configuration » dont on entend souvent parler avec Ruby On Rails.

%p Prenons un exemple pour illustrer ceci en se penchant sur le code généré par un scaffold. Supposons donc que nous ayons executé la commande suivante pour générer notre scaffold pour une ressource Article :

%pre.shell
  :preserve
  $ rails g scaffold Article name:string content:text


%p Parmis le code généré regardons le code du controller Article, dans lequel on peut voir un exemple de ce comportement par défaut, par exemple la méthode index :

%pre.ruby
  :preserve
  # app/controllers/articles_controller.rb

  def index
    @articles = Article.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @articles }
    end
  end

%p On constate que lorsque la requête est faite au format HTML, il n'y a aucune instruction précise, et le contrôleur effectue quand même le rendu de la vue <code>app/views/articles/index.html.erb</code>

%h2 Variables accessibles dans la vue

%p Maintenant que l'on sait comment créer une réponse, on souhaite très souvent partager des variables en tre le contrôleur et la vue. Pour cela il suffit de définir une variable d'instance, comme on peut voir, toujours dans la méthode index du contrôleur Article généré par le scaffold :

%pre.ruby
  :preserve
  # app/controllers/articles_controller.rb

  def index
    @articles = Article.all
    …
  end

%p En créant une variable avec un <code>@</code>, on crée une variable d'instance, c'est à dire que cette variable est accessible tout au long de la vie de l'objet. Ainsi, cette instance contenant l'ensemble des modèles <code>Articles</code> sera accessible dans la vue qui sera rendu par le contrôleur. Et donc cette variable est utilisée dans la vue <code>index</code> comme ceci : 

%pre.erb
  :preserve
  <h1>Listing articles</h1>

  <table>
    <tr>
      <th>Name</th>
      <th>Content</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>

  <% @articles.each do |article| %>
    <tr>
      <td><%= article.name %></td>
      <td><%= article.content %></td>
      <td><%= link_to 'Show', article %></td>
      <td><%= link_to 'Edit', edit_article_path(article) %></td>
      <td><%= link_to 'Destroy', article, confirm: 'Are you sure?', method: :delete %></td>
    </tr>
  <% end %>
  </table>

%h2 Paramètres et données utilisateurs

%p Il est très fréquent d'avoir besoin de récupérer les données envoyées par l'utilisateur ou même des paramètres que vous définissez vous-même pour modifier le comportement des actions.

%p Il existe deux types de paramètres possibles dans une application Web. 
Tout d'abord, les paramètres passés dans l'URL et donc passé par la méthode HTTP <code>GET</code>. Ils correspondent à l'ensemble de ce qui est écrit dans l'URL aprsè le caractère <code>?</code>.
Ensuite, les paramètres passés par la méthode HTTP <code>POST</code> qui viennent généralement d'un formulaire HTML qui à été rempli par l'utilisateur.

%p Rails ne fait aucune distinction entre ces deux types de paramètres, et les deux sont accessible via le <a href="http://ruby-doc.org/docs/beginner-fr/xhtml/ch03s04.html" target="_blank">hash</a> <code>params</code> dans le contrôleur. Voici un exemple de paramètre passé par la méthode <code>GET</code> :

%pre.ruby
  :preserve
    # app/controllers/articles_controller.rb

    # GET /articles/1/edit (exemple d'URL)
    def edit
      @article = Article.find(params[:id])
    end

%p Ici, la méthode edit récupère l'<code>id</code> contenue dans l'url pour trouver dans la base de donnée l'article à éditer et créer une instance de cet article.

%p On peut égalemment voir un exemple de paramètre passés par la méthode <code>POST</code> dans avec la vue du formulaire :

%pre.ruby
  :preserve
  <%= form_for(@article) do |f| %>
    <% if @article.errors.any? %>
      …
    <% end %>

    <div class="field">
      <%= f.label :name %><br />
      <%= f.text_field :name %>
    </div>
    <div class="field">
      <%= f.label :content %><br />
      <%= f.text_area :content %>
    </div>
    <div class="actions">
      <%= f.submit %>
    </div>
  <% end %>

%p Lorsque l'on envoi ce formulaire si on regarde dans la console, on peut constater que le hash params contient toutes nos informations :

%pre.ruby
  :preserve
  Started POST "/articles" for 127.0.0.1 at 2012-05-28 20:53:00 +0200
  Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"D5ivgsVng2NL46KIE62+y57gRBAK+uhLuyOgqD+bE3k=", "article"=>{"name"=>"Article test", "content"=>"Lorem ipsum dolor sit amet, consectetur adipiscing elit."}, "commit"=>"Create Article"}

%p Et les récupérés dans le contrôleur dans la méthode create :

%pre.ruby
  :preserve
  def create
    @article = Article.new(params[:article])

    respond_to do |format|
    …
    end
  end